адача 1. Класс BigAlgebra
Реализовать класс BigAlgebra, содержащий следующие статические методы:

1.1 Метод BigDecimal fastPow(BigDecimal num, int pow)
Реализовать алгоритм быстрого возведения в степень pow числа num в BigDecimal, описание алгоритма можно прочитать например в Википедии


1.2 Метод BigInteger fibonacci(int n)
Реализовать алгоритм вычисления n-го числа фибоначчи в BigInteger. Последовательность чисел Фибоначчи, это когда каждое
последующее число равно сумме двух предыдущих чисел. Первые 2 числа последовательности 1, 1. Итого получаем 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144 и т.д.


Задача 2. Класс AbsInteger и потомки

2.1 Реализовать класс AbsInteger - абстрактное целое число

2.2 Реализовать потомков ByteInteger, ShortInteger, IntInteger, хранящих значение целого числа соответствующего типа. У каждого типа
 реализовать конструктор, принимающей значение числа соответствующего типа, для ByteInteger - byte, ShortInteger - short и IntInteger - int.
 Реализовать унаследованные публичные методы String toString(), посредством которых возвращать приведенное к строке значение соответствующего классу типа.

2.3 У класса AbsInteger реализовать метод static AbsInteger add(AbsInteger num1, AbsInteger num2) - который вычисляет сумму num1 и num2.
 При этом надо учесть, что num1 и num2 могут быть разных типов. Для того, чтобы это реализовать продумать, какие дополнительные методы нужно
 сделать у AbsInteger и его потомков.

Привести результат к наиболее подходящему типу, т.е. -128..127 это ByteInteger и т.д.


Задача 3. Класс ArrayInteger

Реализовать класс ArrayInteger - целого числа произвольной длины на массиве byte[] digits; Каждый элемент массива digits[i]
может хранить только цифру, то есть число от 0 до 9. Например, число 159 должно занять 3 ячейки массива digits[0] = 9; digits[1] = 5; digits[2] = 1;

Реализовать методы:

3.1 ArrayInteger(int n) - инициализирует класс, с максимальной точностью n цифр (размер массива)

3.2 void fromInt(BigInteger value) - установить свое значение, взяв его из value (уложить BigInteger во внутренний массив)

3.3 BigInteger toInt() - привести свое значение к BigInteger (преобразовать из массива в BigInteger)

3.4 boolean add(ArrayInteger num) - сложить 2 числа, не используя BigInteger, а  используя массив digits, результат поместить
  в экземпляр ArrayInteger, у которого был вызван метод. При переполнении вернуть false, при этом само число сбросить в 0


